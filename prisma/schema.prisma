// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL") // uses connection pooling
}

enum BirthYearInfo {
    EXACT
    APPROXIMATE
    UNKNOWN
}

enum DeathYearInfo {
    EXACT
    APPROXIMATE
    UNKNOWN
    ALIVE
}

model User {
    id                 Int                  @id @default(autoincrement())
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt
    username           String               @unique
    password           String
    sessions           Session[]
    pieces             Piece[]
    composer           Composer[]
    tags               Tag[]
    scoreSource        ScoreSource[]
    audioCDSource      AudioCDSource[]
    youtubeAudioSource YoutubeAudioSource[]
    Artist             Artist[]

    @@map("users")
}

model Session {
    id        String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    Int

    @@map("sessions")
}

model Piece {
    id                  Int                  @id @default(autoincrement())
    createdAt           DateTime             @default(now())
    updatedAt           DateTime             @updatedAt
    createdBy           User?                @relation(fields: [userId], references: [id])
    userId              Int?
    title               String
    composers           Composer[]
    tags                Tag[]
    explanation         String?
    scoreSources        ScoreSource[]
    audioCDSources      AudioCDSource[]
    youtubeAudioSources YoutubeAudioSource[]

    // playstyle   Playstyle  @relation(fields: [playstyleId], references: [id])
    // playstyleId Int
    // arrangers s Arranger[]
    // movies      Movie[]

    @@map("pieces")
}

model Composer {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy User?    @relation(fields: [userId], references: [id])
    userId    Int?
    name      String
    pieces    Piece[]

    birthYear     Int?
    birthYearInfo BirthYearInfo @default(EXACT)
    deathYear     Int?
    deathYearInfo DeathYearInfo @default(EXACT)
    floruitStart  Int?
    floruitEnd    Int?
    isFloruit     Boolean       @default(false)

    @@map("composers")
}

model Artist {
    id                 Int                  @id @default(autoincrement())
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt
    createdBy          User?                @relation(fields: [userId], references: [id])
    userId             Int?
    name               String
    audioCDSource      AudioCDSource[]
    youtubeAudioSource YoutubeAudioSource[]

    // birthYear     Int?
    // birthYearInfo BirthOrDeathYearInfo
    // deathYear     Int?
    // deathYearInfo BirthOrDeathYearInfo
    // floruitStart  Int?
    // floruitEnd    Int?
    // isFloruit     Boolean              @default(false)
    // isAlive       Boolean              @default(false)

    @@map("artists")
}

model ScoreSource {
    id          Int       @id @default(autoincrement())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    createdBy   User?     @relation(fields: [userId], references: [id])
    userId      Int?
    playstyle   Playstyle @relation(fields: [playstyleId], references: [id])
    playstyleId Int
    arrangers   String?
    title       String
    publisher   String
    explanation String?
    url         String?
    piece       Piece     @relation(fields: [pieceId], references: [id])
    pieceId     Int

    @@map("score_sources")
}

model AudioCDSource {
    id                      Int       @id @default(autoincrement())
    createdAt               DateTime  @default(now())
    updatedAt               DateTime  @updatedAt
    createdBy               User?     @relation(fields: [userId], references: [id])
    userId                  Int?
    playstyle               Playstyle @relation(fields: [playstyleId], references: [id])
    playstyleId             Int
    arrangers               String?
    title                   String
    explanation             String?
    url                     String?
    isYoutubeAudioAvailable Boolean
    youtubeAudioUrl         String?
    piece                   Piece     @relation(fields: [pieceId], references: [id])
    pieceId                 Int
    artists                 Artist[]

    @@map("audio_cd_sources")
}

model YoutubeAudioSource {
    id          Int       @id @default(autoincrement())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    createdBy   User?     @relation(fields: [userId], references: [id])
    userId      Int?
    playstyle   Playstyle @relation(fields: [playstyleId], references: [id])
    playstyleId Int
    url         String
    arrangers   String?
    explanation String?
    piece       Piece     @relation(fields: [pieceId], references: [id])
    pieceId     Int
    artists     Artist[]

    @@map("youtube_audio_sources")
}

// model Arranger {
//     id        Int      @id @default(autoincrement())
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
//     createdBy User?    @relation(fields: [userId], references: [id])
//     userId    Int?
//     name      String
//     // pieces    Piece[]
//     Score     Score[]
//     Audio     Audio[]

//     @@map("arrangers"s
// }

model Playstyle {
    id                 Int                  @id @default(autoincrement())
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt
    name               String
    label              String
    ScoreSource        ScoreSource[]
    AudioCDSource      AudioCDSource[]
    YoutubeAudioSource YoutubeAudioSource[]

    @@map("playstyles")
}

model Tag {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy User?    @relation(fields: [userId], references: [id])
    userId    Int?
    name      String
    pieces    Piece[]

    @@map("tags")
}

// model Movie {
//     id        String   @id
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
//     createdBy User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
//     userId    Int?
//     // piece     Piece    @relation(fields: [pieceId], references: [id], onDelete: Cascade)
//     // pieceId   Int

//     @@map("movies")
// }
